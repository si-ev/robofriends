{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACxB,OACK,sBAAKC,UAAU,sDAAf,UACK,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACK,mCAAMF,EAAN,OACA,kCAAKC,EAAL,cCaLK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACf,OACQ,8BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACZ,OACK,cAAC,EAAD,CACMR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCM3BC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC5B,OACK,8BACQ,uBACKV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCCpBI,EARA,SAACC,GACX,OACK,sBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,SAApE,UACMJ,EAAMK,SADZ,QCmBKC,E,kDApBV,WAAYN,GAAO,IAAD,8BACb,cAAMA,IACDO,MAAQ,CACRC,UAAU,GAHF,E,qDAOlB,SAAkBC,EAAOC,GACpBC,KAAKC,UAAS,iBAAO,CAAEJ,UAAU,Q,oBAGtC,WACK,OAAIG,KAAKJ,MAAMC,SACH,4DAGLG,KAAKX,MAAMK,a,GAjBDQ,aC+CZC,G,wDAxCV,aAAc,IAAD,8BACR,gBAaLC,eAAiB,SAACC,GAEb,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAd1C,EAAKX,MAAQ,CACVlB,OAAQ,GACRK,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACdyB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACvB,OAAQkC,S,oBAQ/C,WACK,MAAgCZ,KAAKJ,MAA7BlB,EAAR,EAAQA,OAAQK,EAAhB,EAAgBA,YACV8B,EAAiBnC,EAAOoC,QAAO,SAAAC,GAChC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAE1D,OAAQtC,EAAOwC,OAGL,sBAAK5C,UAAU,KAAf,UACQ,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQmC,WAPzC,+C,GA1BKX,cCIHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.db4e4520.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n     return(\n          <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n               <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n               <div>\n                    <h2> {name} </h2>\n                    <p> {email} </p>\n               </div>\n          </div>\n     );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n     return (\n             <div>\n                 {\n                     robots.map((user,i) => {\n                          return ( \n                               <Card key={i} \n                                     id={robots[i].id} \n                                     name={robots[i].name} \n                                     email={robots[i].email}\n                               />\n                          );\n                     })\n                 }\n             </div>\n     );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n     return(\n          <div>\n                  <input \n                       className='pa3 ba b--green bg-lightest-blue'\n                       type='search' \n                       placeholder='search robots' \n                       onChange = {searchChange}\n                  />\n          </div>\n     );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n     return (\n          <div style={{overflowY: 'scroll', border:'5px solid black', height: '800px'}}>\n               {props.children};\n          </div>\n     )\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n     constructor(props){\n          super(props);\n          this.state = {\n               hasError: false\n          }\n     }\n\n     componentDidCatch(error, info){\n          this.setState(() => ({ hasError: true }));\n     }\n\n     render(){\n          if (this.state.hasError){\n               return <h1> Oooops. That is not good </h1>\n          }\n\n          return this.props.children;\n     }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\nclass App extends Component{\n     constructor(){\n          super();\n          this.state = {\n             robots: [],\n             searchfield: ''\n          }\n     }\n\n     componentDidMount(){\n          fetch('https://jsonplaceholder.typicode.com/users')\n              .then(response => response.json())\n              .then(users => this.setState({robots: users}));\n     }\n\n     onSearchChange = (event) => {\n          // Arrow function to aviod redefining of this inside the event handler\n          this.setState({ searchfield: event.target.value });\n     }\n\n     render(){\n          const { robots, searchfield } = this.state;\n          const filteredRobots = robots.filter(robot => {\n               return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n          });\n          return !robots.length ?\n             <h1> Loading </h1> :\n              (\n                    <div className='tc'>\n                            <h1 className='f1'> RoboFirends </h1>\n                            <SearchBox searchChange={this.onSearchChange}/>\n                            <Scroll>\n                                <ErrorBoundry>\n                                    <CardList robots={filteredRobots} />\n                                </ErrorBoundry>\n                            </Scroll>\n                    </div>\n              );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}